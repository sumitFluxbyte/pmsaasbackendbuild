generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrgStatusEnum {
  ACTIVE
  DEACTIVE
}

enum UserRoleEnum {
  ADMINISTRATOR
  PROJECT_MANAGER
  TEAM_MEMBER
}

enum ConsoleRoleEnum {
  SUPER_ADMIN
  OPERATOR
}

enum ConsoleStatusEnum {
  ACTIVE
  INACTIVE
}

enum UserStatusEnum {
  ACTIVE
  INACTIVE
}

enum ProjectStatusEnum {
  NOT_STARTED
  ACTIVE
  ON_HOLD
  CLOSED
}

enum ProjectDefaultViewEnum {
  KANBAN
  GANTT
  CALENDAR
  LIST
}

enum ProjectOverAllTrackEnum {
  SUNNY
  CLOUDY
  RAINY
  STORMY
}

enum MilestoneIndicatorStatusEnum {
  NOT_STARTED
  COMPLETED
}

enum TaskStatusEnum {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum TaskDependenciesEnum {
  SUCCESSORS
  PREDECESSORS
}

enum UserProviderTypeEnum {
  EMAIL
  GOOGLE
}

enum NotificationTypeEnum {
  PROJECT
  TASK
}

enum HistoryTypeEnum {
  PROJECT
  TASK
}

enum ScheduleAndBudgetTrendEnum {
  INCREASING
  STABLE
  DECREASING
}

enum LanguageEnum {
  EN
  FR
}

model User {
  userId                String         @id @default(uuid()) @map("user_id")
  email                 String         @unique @map("email")
  status                UserStatusEnum @map("status")
  firstName             String?        @map("first_name")
  lastName              String?        @map("last_name")
  timezone              String?        @map("time_zone")
  country               String?        @map("country")
  avatarImg             String?        @map("avatar_img")
  phoneNumber           String?        @map("phone_number")
  countryCode           String?        @map("country_code")
  language              LanguageEnum?  @default(EN) @map("language")
  isPhoneNumberVerified Boolean?       @map("is_phone_number_verified")
  isVerified            Boolean        @default(false) @map("is_verified")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")

  comment           Comments[]
  userOrganisation  UserOrganisation[]
  userResetPassword ResetPassword[]

  createdOrganisations Organisation[] @relation("createdByUser")
  updatedOrganisations Organisation[] @relation("updatedByUser")

  createdProject Project[] @relation("createdByUser")
  updatedProject Project[] @relation("updatedByUser")

  provider UserProvider[]

  createdTask         Task[]            @relation("createdByUser")
  updatedTask         Task[]            @relation("updatedByUser")
  taskAssignUsers     TaskAssignUsers[]
  createdKanbanColumn KanbanColumn[]    @relation("createdByUser")
  updatedKanbanColumn KanbanColumn[]    @relation("updatedByUser")

  history               History[]
  uploadedAttachment    TaskAttachment[]
  addedDependencies     TaskDependencies[]
  sentNotifications     Notification[]       @relation("sentNotificationBy")
  receivedNotifications Notification[]       @relation("sentNotificationTo")
  projectAssignUsers    ProjectAssignUsers[]

  deletedAt DateTime? @map("deleted_at")

  @@index([userId, email])
}

model UserProvider {
  userProviderId String @id @default(uuid()) @map("user_provider_id")
  userId         String @map("user_id")
  user           User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  idOrPassword String               @map("id_or_password")
  providerType UserProviderTypeEnum @map("provider_type")
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @updatedAt @map("updated_at")

  deletedAt DateTime? @map("deleted_at")

  @@unique([userId, providerType])
}

model ConsoleUser {
  userId     String            @id @default(uuid()) @map("user_id")
  email      String            @unique @map("email")
  password   String            @map("password")
  status     ConsoleStatusEnum @map("status")
  role       ConsoleRoleEnum   @map("role")
  firstName  String?           @map("first_name")
  lastName   String?           @map("last_name")
  avatarImg  String?           @map("avatar_img")
  country    String?           @map("country")
  timezone   String?           @map("time_zone")
  isVerified Boolean           @default(false) @map("is_verified")
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")

  deletedAt DateTime? @map("deleted_at")

  @@unique([email, password])
  @@index([userId, email])
}

model UserOTP {
  otpId      String   @id @default(uuid()) @map("otp_id")
  userId     String   @map("user_id")
  otp        String   @map("otp")
  expiryTime DateTime @map("expiry_time")
  isUsed     Boolean  @map("is_used")
  meta       Json?    @map("meta")
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId, otp])
}

model ResetPassword {
  resetPasswordId String   @id @default(uuid()) @map("reset_password_id")
  userId          String   @map("user_id")
  token           String   @map("token")
  isUsed          Boolean  @map("is_used")
  expiryTime      DateTime @map("expiry_time")
  createdAt       DateTime @default(now()) @map("created_at")
  user            User?    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  deletedAt DateTime? @map("deleted_at")
}

model Organisation {
  organisationId   String        @id @default(uuid()) @map("organisation_id")
  organisationName String        @map("organisation_name")
  industry         String        @map("industry")
  status           OrgStatusEnum @map("status")
  country          String        @map("country")
  holidayCsvUrl    String?       @map("holiday_csv_url")
  nonWorkingDays   Json          @map("non_working_days")
  jobTitlesOfOrg   Json?         @map("job_titles_of_org")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  tenantId         String?       @map("tenant_id")
  createdByUserId  String        @map("created_by_user_id")
  createdByUser    User          @relation("createdByUser", fields: [createdByUserId], references: [userId], onDelete: Cascade)
  updatedByUserId  String?       @map("updated_by_user_id")
  updatedByUser    User?         @relation("updatedByUser", fields: [updatedByUserId], references: [userId], onDelete: Cascade)

  projects         Project[]
  userOrganisation UserOrganisation[]
  orgHolidays      OrganisationHolidays[]

  deletedAt DateTime? @map("deleted_at")

  @@unique([organisationName, industry, createdByUserId])
  @@index([organisationId, tenantId])
}

model OrganisationHolidays {
  orgHolidaysId    String        @id @default(uuid()) @map("org_holidays_id")
  organisationId   String        @map("organisation_id")
  organisation     Organisation? @relation(fields: [organisationId], references: [organisationId], onDelete: Cascade)
  holidayStartDate DateTime      @map("holiday_startDate")
  holidayEndDate   DateTime?     @map("holiday_endDate")
  holidayType      String?       @map("holiday_type")
  holidayReason    String?       @map("holiday_reason")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  deletedAt        DateTime?     @map("deleted_at")

  @@unique([organisationId, holidayStartDate, holidayEndDate])
  @@index([organisationId, holidayStartDate])
}

model Tenant {
  tenantId         String   @id @default(uuid()) @map("tenant_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  connectionString String?  @map("connection_string")

  deletedAt DateTime? @map("deleted_at")

  @@index([tenantId])
}

model UserOrganisation {
  userOrganisationId String        @id @default(uuid()) @map("user_organisation_id")
  userId             String        @map("user_id")
  organisationId     String        @map("organisation_id")
  role               UserRoleEnum? @map("role")
  jobTitle           String?       @map("job_title")
  taskColour         String?       @map("task_colour")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  organisation Organisation? @relation(fields: [organisationId], references: [organisationId], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [userId], onDelete: Cascade)

  deletedAt DateTime? @map("deleted_at")

  @@unique([userId, organisationId])
  @@index([userId, organisationId, role])
}

model Project {
  projectId          String                     @id @unique @default(uuid()) @map("project_id")
  organisationId     String                     @map("organisation_id")
  organisation       Organisation               @relation(fields: [organisationId], references: [organisationId], onDelete: Cascade)
  projectName        String                     @map("project_name")
  projectDescription String?                    @map("project_description") @db.VarChar(500)
  startDate          DateTime                   @map("start_date")
  estimatedEndDate   DateTime?                  @map("estimated_end_date")
  actualEndDate      DateTime?                  @map("actual_end_date")
  status             ProjectStatusEnum          @default(NOT_STARTED) @map("status")
  defaultView        ProjectDefaultViewEnum     @default(LIST) @map("default_view")
  timeTrack          String?                    @map("time_track")
  budgetTrack        String?                    @map("budget_track")
  currency           String                     @map("currency")
  overallTrack       ProjectOverAllTrackEnum    @default(SUNNY) @map("overall_track")
  estimatedBudget    String?                    @map("estimated_budget")
  consumedBudget     String                     @default("0") @map("consumed_budget")
  scheduleTrend      ScheduleAndBudgetTrendEnum @default(STABLE) @map("schedule_trend")
  budgetTrend        ScheduleAndBudgetTrendEnum @default(STABLE) @map("budget_trend")
  actualCost         String?                    @map("actual_cost")
  createdByUserId    String                     @map("created_by_user_id")
  createdByUser      User                       @relation("createdByUser", fields: [createdByUserId], references: [userId], onDelete: Cascade)
  updatedByUserId    String?                    @map("updated_by_user_id")
  updatedByUser      User?                      @relation("updatedByUser", fields: [updatedByUserId], references: [userId], onDelete: Cascade)
  createdAt          DateTime                   @default(now()) @map("created_at")
  updatedAt          DateTime                   @updatedAt @map("updated_at")

  tasks         Task[]
  kanbanColumns KanbanColumn[]
  assignedUsers ProjectAssignUsers[]

  deletedAt DateTime? @map("deleted_at")

  @@unique([organisationId, projectName])
  @@index([projectId, organisationId])
}

model ProjectAssignUsers {
  projectAssignUsersId String       @id @default(uuid()) @map("project_assign_users_id")
  projectId            String       @map("project_id")
  assginedToUserId     String       @map("assgined_to_user_id")
  projectRole          UserRoleEnum @map("project_role")
  projectJobTitle      String?      @map("project_job_title")
  project              Project      @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  user                 User         @relation(fields: [assginedToUserId], references: [userId], onDelete: Cascade)
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")

  @@unique([projectId, assginedToUserId])
}

model Task {
  taskId             String                       @id @default(uuid()) @map("task_id")
  projectId          String                       @map("project_id")
  project            Project                      @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  taskName           String                       @map("task_name")
  taskDescription    String?                      @map("task_description")
  startDate          DateTime                     @map("start_date")
  status             TaskStatusEnum               @default(NOT_STARTED) @map("status")
  milestoneIndicator Boolean                      @default(false) @map("milestone_indicator")
  milestoneStatus    MilestoneIndicatorStatusEnum @default(NOT_STARTED) @map("milestone_status")
  dueDate            DateTime?                    @map("due_date")
  createdByUserId    String                       @map("created_by_user_id")
  createdByUser      User                         @relation("createdByUser", fields: [createdByUserId], references: [userId], onDelete: Cascade)
  updatedByUserId    String?                      @map("updated_by_user_id")
  updatedByUser      User?                        @relation("updatedByUser", fields: [updatedByUserId], references: [userId], onDelete: Cascade)
  createdAt          DateTime                     @default(now()) @map("created_at")
  updatedAt          DateTime                     @updatedAt @map("updated_at")
  kanbanColumnId     String?                      @map("kanban_column_Id")
  ganttColor         String?                      @map("task_color")


  duration            Float  @map("duration")
  completionPecentage Float? @map("completion_percentage")

  subtasks            Task[]            @relation("parentTask")
  comments            Comments[]
  histories           History[]
  documentAttachments TaskAttachment[]
  assignedUsers       TaskAssignUsers[]

  parentTaskId    String?            @map("parent_task_id")
  parent          Task?              @relation("parentTask", fields: [parentTaskId], references: [taskId], onDelete: Cascade)
  dependencies    TaskDependencies[] @relation("dependencies")
  dependentOnTask TaskDependencies[] @relation("dependentOnTask")

  deletedAt DateTime? @map("deleted_at")

  @@unique([projectId, taskName])
  @@index([taskId, projectId])
}

model TaskAssignUsers {
  taskAssignUsersId String   @id @default(uuid()) @map("task_assign_users_id")
  taskId            String   @map("task_id")
  assginedToUserId  String   @map("assgined_to_user_id")
  task              Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  user              User     @relation(fields: [assginedToUserId], references: [userId], onDelete: Cascade)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  deletedAt DateTime? @map("deleted_at")

  @@unique([taskId, assginedToUserId])
}

model TaskDependencies {
  taskDependenciesId      String               @id @default(uuid()) @map("dependencies_id")
  dependentTaskId         String               @map("dependent_task_id")
  dependentTask           Task                 @relation("dependencies", fields: [dependentTaskId], references: [taskId], onDelete: Cascade)
  dependentType           TaskDependenciesEnum @map("dependent_type")
  dependendentOnTaskId    String               @map("dependent_on_task_id")
  dependentOnTask         Task                 @relation("dependentOnTask", fields: [dependendentOnTaskId], references: [taskId], onDelete: Cascade)
  createdAt               DateTime             @default(now()) @map("created_at")
  updatedAt               DateTime             @updatedAt @map("updated_at")
  dependenciesAddedBy     String               @map("dependencies_added_by")
  dependenciesAddedByUser User                 @relation(fields: [dependenciesAddedBy], references: [userId], onDelete: Cascade)

  deletedAt DateTime? @map("deleted_at")

  @@unique([dependentTaskId, dependentType, dependendentOnTaskId])
  @@index([dependentTaskId, dependentType, dependendentOnTaskId])
}

model TaskAttachment {
  attachmentId String   @id @default(uuid()) @map("attachment_id")
  name         String   @map("name")
  url          String   @map("url")
  taskId       String   @map("task_id")
  task         Task     @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  uploadedBy     String @map("uploaded_by")
  uploadedByUser User   @relation(fields: [uploadedBy], references: [userId], onDelete: Cascade)

  deletedAt DateTime? @map("deleted_at")

  @@index([taskId])
}

model Comments {
  commentId       String     @id @default(uuid()) @map("comment_id")
  taskId          String     @map("task_id")
  commentText     String     @map("comment_text") @db.VarChar(500)
  commentByUserId String     @map("comment_by_user_id")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  task            Task       @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  parentCommentId String?    @map("parent_comment_id")
  parentComment   Comments?  @relation("ChildComments", fields: [parentCommentId], references: [commentId], onDelete: Cascade)
  childComments   Comments[] @relation("ChildComments")

  commentByUser User @relation(fields: [commentByUserId], references: [userId], onDelete: Cascade)

  deletedAt DateTime? @map("deleted_at")

  @@index([commentId, commentByUserId])
}

model Notification {
  notificationId String               @id @default(uuid()) @map("notification_id")
  type           NotificationTypeEnum @map("type")
  referenceId    String               @map("reference_id")

  sentBy             String @map("sent_by")
  sentNotificationBy User   @relation("sentNotificationBy", fields: [sentBy], references: [userId], onDelete: Cascade)

  sentTo             String @map("sent_to")
  sentNotificationTo User   @relation("sentNotificationTo", fields: [sentTo], references: [userId], onDelete: Cascade)

  details   String?  @map("details")
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  ReadAt    DateTime @updatedAt @map("read_at")

  deletedAt DateTime? @map("deleted_at")

  @@index([sentBy, sentTo, referenceId])
}

model KanbanColumn {
  kanbanColumnId String @id @default(uuid()) @map("kanban_column_id")

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  name            String  @map("name")
  percentage      Float?  @map("percentage")
  createdByUserId String  @map("created_by_user_id")
  createdByUser   User    @relation("createdByUser", fields: [createdByUserId], references: [userId], onDelete: Cascade)
  updatedByUserId String? @map("updated_by_user_id")
  updatedByUser   User?   @relation("updatedByUser", fields: [updatedByUserId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deletedAt DateTime? @map("deleted_at")

  @@unique([kanbanColumnId, projectId])
}

model History {
  historyId     String          @id @default(uuid()) @map("history_id")
  referenceId   String          @map("reference_id")
  task          Task            @relation(fields: [referenceId], references: [taskId], onDelete: Cascade)
  type          HistoryTypeEnum @map("type")
  data          Json            @map("data")
  message       String          @map("message")
  createdBy     String          @map("created_by")
  createdByUser User            @relation(fields: [createdBy], references: [userId], onDelete: Cascade)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  deletedAt DateTime? @map("deleted_at")

  @@index([referenceId, createdBy])
}
